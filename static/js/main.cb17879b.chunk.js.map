{"version":3,"sources":["js/data.js","js/utilities.js","js/functions.js","img/riverford-transparent.png","App.js","reportWebVitals.js","index.js"],"names":["alphaBet","alphaBetScore","theScore","theNumbers","getMaxIndex","_numArr","maxNum","Math","max","maxIndex","ii","length","stripStrLetters","str","strippedEndingsStr","toLowerCase","trim","replace","Array","from","stripStrCleanArray","strToArray","split","noReturnArr","push","LineCount","MeanCalculate","totalWordCount","toFixed","ModeCalculate","totalLetterLength","wordSet","i","iii","JSON","stringify","highestScoreIndex","MedianCalculate","cleanArr","_middlePos","sortedNewArray","sort","a","b","middlePos","Number","isInteger","_arr","middleLowerPos","middleUpperPos","middleLowerCount","medianEven","ceil","MostCommonLetter","letterArr","App","showFile","window","File","FileReader","FileList","Blob","scope","file","document","querySelector","files","reader","type","match","onload","event","_data","target","result","setState","resultObj","console","log","readAsText","alert","state","name","resultArray","className","Helmet","Container","Jumbotron","src","logo","alt","onChange","this","map","obj","index","title","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb17879b.chunk.js","sourcesContent":["//data.js\n//data tables, variables, etc.\n\n// testing for letter - arrays same size?\nexport const alphaBet = [\n    \"a\",\"b\",\"c\",\"d\",\n    \"e\",\"f\",\"g\",\"h\",\n    \"i\",\"j\",\"k\",\"l\",\n    \"m\",\"n\",\"o\",\"p\",\n    \"q\",\"r\",\"s\",\"t\",\n    \"u\",\"v\",\"w\",\"x\",\n    \"y\",\"z\",\n];\n\nexport const alphaBetScore = [\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,\n];\n// testing for word length - arrays same size?\nexport const theScore = [0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    ];\n\nexport const theNumbers = [0,1,2,3,\n    4,5,6,7,\n    8,9,10,11,\n    12,13,14,15,\n    16,17,18,19,20                  \n    ];","//utilities.js\n// odd/even test\nexport function medianEven(_arr, _middlePos){\n    \n    var middleLowerPos = _middlePos;\n    var middleUpperPos = _middlePos + 1;\n    // array nudge - include 0\n    middleLowerPos = middleLowerPos -1;\n    middleUpperPos = middleUpperPos -1;\n\n    var middleLowerCount = _arr[middleLowerPos];\n    var middleUpperCount = _arr[middleUpperPos];\n\n    return (middleUpperCount + middleLowerCount) / 2;\n}\n\nexport function medianOdd(_arr, _middlePos){\n    var middlePosRoundUpAndNudgeDown = Math.ceil(_middlePos - 1);\n    return _arr[middlePosRoundUpAndNudgeDown];\n}\n//\n//returns the index with the highest numnber in array..\nexport function getMaxIndex(_numArr){\n    var maxNum = Math.max(..._numArr);\n    var maxIndex = 0;\n\n    for(let ii = 0; ii < _numArr.length; ii++){\n        maxIndex = _numArr[ii] === maxNum ? ii : maxIndex;\n    }\n    return maxIndex;\n\n}\n\n//string cleaning\n//returns array of all letters\nexport function  stripStrLetters(str) {\n    //remove capitals, special characters, line endings and spaces\n    var lowercaseStr = str.toLowerCase();\n    var trimStr = lowercaseStr.trim();\n    var trimStrNoSpecials = trimStr.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\");//?\n    //line ending/space different\n    var strippedEndingsStr = trimStrNoSpecials.replace(/\\n|\\r|\\s/g, \"\");\n\n    var letterArr = Array.from(strippedEndingsStr);\n\n    return letterArr;\n}\n\n//returns array of all words \n// NEED TO TEST ON WINDOWS!\nexport function stripStrCleanArray(str){\n    //remove capitals, special characters, line endings and spaces\n    //ABSTRACT\n    var lowercaseStr = str.toLowerCase();\n    var trimStr = lowercaseStr.trim();\n    var trimStrNoSpecials = trimStr.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\");\n    //line ending different\n    var strippedStr = trimStrNoSpecials.replace(/\\n|\\r/g, \" \");\n\n    var strToArray = strippedStr.split(\" \");\n\n    var noReturnArr = [];\n    // remove duds\n    for(let ii =0; ii < strToArray.length; ii++){\n        strToArray[ii] !== \"\" ? noReturnArr.push(strToArray[ii]) : noReturnArr = noReturnArr;\n    }\n\n    //\n    return noReturnArr;\n}","\nimport {alphaBet,\n    alphaBetScore,\n    theNumbers,\n    theScore,\n    } from './data.js';\n\nimport {getMaxIndex,\n        stripStrLetters,\n        stripStrCleanArray,\n        medianEven,\n        medianOdd,\n        } from './utilities.js';\n\n//\n\nexport function WordCount(str) { \n    const cleanArr = stripStrCleanArray(str);\n    return cleanArr.length;\n  }\n\nexport function LineCount(str) {\n    return str.split(\"\\n\").length;//? pc/mac\n}\n\nexport function MeanCalculate(str) {\n\n    const cleanArr = stripStrCleanArray(str);// rename - cleanArr\n\n    const totalWordCount = cleanArr.length;\n\n    const letterCount = stripStrLetters(str);\n    \n    const wordMean = (letterCount.length/totalWordCount).toFixed(1);\n\n    return wordMean;\n\n  }\n\n  export function ModeCalculate(str) {\n    \n    var strToArray = str.split(\" \");\n    var totalLetterLength = strToArray.length;\n\n    var wordSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      wordSet.push(strToArray[i].length);\n    }\n\n    for(let i=0; i < wordSet.length; i++){\n      for (let iii = 0; iii < theNumbers.length; iii++){\n            // theScore[iii] = JSON.stringify(theNumbers[iii])===(JSON.stringify(wordSet[i])) ? theScore[iii] + 1: null;\n            if(JSON.stringify(theNumbers[iii])===JSON.stringify(wordSet[i])){\n                theScore[iii] = theScore[iii] + 1;\n            }\n        \n        }\n    }\n\n    var highestScoreIndex = getMaxIndex(theScore);\n   \n    return theNumbers[highestScoreIndex];\n                    \n  }\n\n  export function MedianCalculate(str){\n    const cleanArr = stripStrCleanArray(str);\n    const totalLetterLength = cleanArr.length;\n    //\n    const wordSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      wordSet.push(cleanArr[i].length);\n    }\n\n    const sortedNewArray = wordSet.sort(function(a,b) { return a - b; });\n    const middlePos = sortedNewArray.length/2;\n\n    const median = Number.isInteger(middlePos) ? medianEven(sortedNewArray, middlePos) : medianOdd(sortedNewArray, middlePos);\n  \n   return median;\n\n  }\n\n  export function MostCommonLetter(str) {\n\n        const letterArr = stripStrLetters(str);\n\n        for (let i=0; i < letterArr.length; i++){\n            for (let ii=0; ii < alphaBet.length; ii++){\n                alphaBetScore[ii] = alphaBet[ii] === letterArr[i] ?  alphaBetScore[ii]+1 : null;\n            }\n        }\n\n        return alphaBet[getMaxIndex(alphaBetScore)];\n\n\n  }","export default __webpack_public_path__ + \"static/media/riverford-transparent.9ba83d44.png\";","import React, { Component } from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import Button from 'react-bootstrap/Button';\n\nimport { WordCount, \n         LineCount,\n         MeanCalculate,\n         ModeCalculate,\n         MedianCalculate,\n         MostCommonLetter,\n       } from './js/functions.js';\nimport './App.css';\n\nimport logo from './img/riverford-transparent.png';\n\n  class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"React\",\n      resultArray:[1,2,3,4,5,],\n      resultObj: [\n\n        ],\n    };\n  }\n\n\n  showFile = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n         const scope = this;   \n\n         var file = document.querySelector('input[type=file]').files[0];\n         var reader = new FileReader()\n\n         var textFile = /text.*/;\n\n        \n\n         if (file.type.match(textFile)) {\n            \n            reader.onload = function (event) {\n\n              const _data = event.target.result;\n\n              scope.setState({\n                resultObj: [\n                  {\n                    \"title\": \"Word Count \",\n                    \"result\": WordCount(_data),\n                  },\n                  {\n                    \"title\": \"Line Count \",\n                    \"result\": LineCount(_data),\n                  },\n                  {\n                    \"title\": \"Mean - Average number of letters per word: \",\n                    \"result\": MeanCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Mode - Most common number of letters per word: \",\n                    \"result\": ModeCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Median - Number of letters per word in middle of set: \",\n                    \"result\": MedianCalculate(_data),// add more definition below text??\n                  },\n                  {\n                    \"title\": \"Most common letter \",\n                    \"result\": MostCommonLetter(_data),\n                  },\n                ],\n              });\n\n            }\n         } else {\n            console.log(\"Error - Please make sure it is a .txt file\");\n         }\n         reader.readAsText(file);\n\n   } else {\n      alert(\"Your browser is too old to support HTML5 File API\");\n   }\n  }  \n\n  render() {\n\n    return (\n        <div className=\"App\">\n          <Helmet>\n                <title>Statistical Analysis</title>\n            </Helmet>\n          <Container className=\"p-3\">\n            <Jumbotron\n              className=\"App-header\"\n            >\n              <img\n                className=\"App-logo\"\n                src={logo}\n                alt=\"Riverford Logo\"\n              />\n              <h1 className=\"bigTxt font-weight-lighter\">Text file Statistical Analysis</h1>\n              <h2 className=\"medTxt font-weight-light\" >Please choose a .txt file:</h2>\n              <div\n                className=\"p-4\"\n              >\n                  <input \n                    type=\"file\" \n                    onChange={this.showFile} \n                    />\n              </div>\n              <div>\n              <ul className=\"list-group list-group-flush\">\n                  {this.state.resultObj.map((obj,index) => \n                          <li \n                              key={index}\n                              className=\"list-group-item \"\n                          >\n                              <div\n                                className=\"d-flex justify-content-between\"\n                              >\n                                  <div\n                                    className=\"smlTxt\"\n                                  >{obj.title}</div>\n                                  <div className=\"text-danger smlTxt\">{obj.result}</div>\n                              </div>\n                          </li>\n                      )\n                  }\n              </ul>\n              </div>\n            </Jumbotron>\n          </Container>\n        </div>\n\n      \n    );\n  }\n    \n  }\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}