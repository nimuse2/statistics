{"version":3,"sources":["js/functions.js","img/riverford-transparent.png","App.js","reportWebVitals.js","index.js"],"names":["WordCount","str","split","length","LineCount","MeanCalculate","strToArray","totalLetterLength","testNewSet","i","push","reduce","a","b","toFixed","ModeCalculate","theScore","theNumbers","iii","JSON","stringify","arr","max","maxIndex","indexOfMax","MedianCalculate","mid","Math","floor","nums","sort","getMedian","indexOf","App","showFile","window","File","FileReader","FileList","Blob","scope","file","document","querySelector","files","reader","type","match","onload","event","_data","target","result","setState","resultArray","resultObj","console","log","readAsText","alert","state","name","this","className","Helmet","Container","Jumbotron","src","logo","onChange","map","obj","index","title","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.45ce6654.chunk.js","sourcesContent":["export function WordCount(str) { \n    return str.split(\" \").length;\n  }\n\nexport function LineCount(str) {\n    return str.split(\"\\n\").length;\n}\nexport function MeanCalculate(str) {\n\n    const strToArray = str.split(\" \");\n    const totalLetterLength = strToArray.length;\n\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(strToArray[i].length);\n    }\n\n    //test - -- CHANGE WORD\n    var testNewTotal = testNewSet.reduce(function(a, b){\n        return a + b;\n    }, 0);\n    const testNewLngth = testNewSet.length;\n\n    const testMean = (testNewTotal/testNewLngth).toFixed(1);\n\n    return testMean;\n\n  }\n\n  export function ModeCalculate(str) {\n    //\n    const strToArray = str.split(\" \");\n    const totalLetterLength = strToArray.length;\n\n    //\n    //new array of word counts\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(strToArray[i].length);\n    }\n    //test scores against 0-20?\n    //could increase if using bigger words?\n    let theScore = [0,0,0,0,\n      0,0,0,0,\n      0,0,0,0,\n      0,0,0,0,\n      0,0,0,0,\n      ];\n    let theNumbers = [0,1,2,3,\n      4,5,6,7,\n      8,9,10,11,\n      12,13,14,15,\n      16,17,18,19,20                  \n      ];\n    \n\n    for(let i=0; i < testNewSet.length; i++){\n      for (let iii = 0; iii < theNumbers.length; iii++){\n        if (JSON.stringify(theNumbers[iii])===(JSON.stringify(testNewSet[i]))) {\n              // match\n              theScore[iii] = theScore[iii] + 1;\n          } else {\n              //No match\n          }\n      }\n\n    }\n    //move somewhere sensible!!!\n    function indexOfMax(arr) {\n      if (arr.length === 0) {\n          return -1;\n      }\n      var max = arr[0];\n      var maxIndex = 0;\n  \n      for (var i = 1; i < arr.length; i++) {\n          if (arr[i] > max) {\n              maxIndex = i;\n              max = arr[i];\n          }\n      }\n      return maxIndex;\n    }\n    var highestScoreIndex = indexOfMax(theScore);\n    return theNumbers[highestScoreIndex];\n                    \n  }\n\n  //MEDIAN\n\n  export function MedianCalculate(str){\n    const strToArray = str.split(\" \");\n    const totalLetterLength = strToArray.length;\n    //\n    //new array of word counts\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(strToArray[i].length);\n    }\n\n    var sortedNewArray = testNewSet.sort(function(a,b) { return a - b; });\n    \n    var uniq = sortedNewArray.reduce(function(a,b){\n        if (a.indexOf(b) < 0 ) a.push(b);\n        return a;\n      },[]);\n\n\n    //#Source https://bit.ly/2neWfJ2 \n    const getMedian = arr => {\n      const mid = Math.floor(arr.length / 2),\n        nums = [...arr].sort((a, b) => a - b);\n      return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n    };\n\n\n    return getMedian(uniq);\n  }","export default __webpack_public_path__ + \"static/media/riverford-transparent.9ba83d44.png\";","import React, { Component } from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import Button from 'react-bootstrap/Button';\n\nimport { WordCount, \n         LineCount,\n         MeanCalculate,\n         ModeCalculate,\n         MedianCalculate,\n       } from './js/functions.js';\nimport './App.css';\n\nimport logo from './img/riverford-transparent.png';\n\n  class App extends Component {\n\n\n  constructor() {\n    super();\n    this.state = {\n      name: \"React\",\n      resultArray:[1,2,3,4,5,],\n      resultObj: [\n\n        ],\n    };\n  }\n\n\n  showFile = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n         const scope = this;   \n\n         var file = document.querySelector('input[type=file]').files[0];\n         var reader = new FileReader()\n\n         var textFile = /text.*/;\n\n        \n\n         if (file.type.match(textFile)) {\n            \n            reader.onload = function (event) {\n\n              const _data = event.target.result;\n\n              scope.setState({\n                resultArray: [\n                  WordCount(_data),\n                  LineCount(_data),\n                  MeanCalculate(_data),\n                  ModeCalculate(_data),\n                  MedianCalculate(_data),\n                ],\n                resultObj: [\n                  {\n                    \"title\": \"Word Count \",\n                    \"result\": WordCount(_data),\n                  },\n                  {\n                    \"title\": \"Line Count \",\n                    \"result\": LineCount(_data),\n                  },\n                  {\n                    \"title\": \"Mean - Average number of letters per word: \",\n                    \"result\": MeanCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Mode - Most common number of letters per word: \",\n                    \"result\": ModeCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Median - Middle number of letters per word: \",\n                    \"result\": MedianCalculate(_data),\n                  },\n                ],\n              });\n\n              // console.log(\"state\", scope.state);\n\n            }\n         } else {\n            console.log(\"Error - Please make sure it is a .txt file\");\n         }\n         reader.readAsText(file);\n\n   } else {\n      alert(\"Your browser is too old to support HTML5 File API\");\n   }\n  }  \n\n  render() {\n    console.log(\"test\", this.state);\n\n    return (\n        <div className=\"App\">\n          <Helmet>\n                <title>Statistical Analysis</title>\n            </Helmet>\n          <Container className=\"p-3\">\n            <Jumbotron\n              className=\"App-header\"\n            >\n              <img\n                className=\"App-logo\"\n                src={logo}\n              />\n              <h1 className=\"display-4\">Text file Statistical Analysis</h1>\n              <h2 className=\"display-5\" >Please choose a .txt file:</h2>\n              <div\n                className=\"p-4\"\n              >\n                  <input \n                    type=\"file\" \n                    onChange={this.showFile} \n                    // className=\"btn btn-primary btn-lg\"\n                    />\n              </div>\n              <div>\n              <ul className=\"list-group list-group-flush\">\n                  {this.state.resultObj.map((obj,index) => \n                          <li \n                              key={index}\n                              className=\"list-group-item \"\n                          >\n                              <div\n                                className=\"d-flex justify-content-between\"\n                              >\n                                  <div>{obj.title}</div>\n                                  <div className=\"text-info\">{obj.result}</div>\n                              </div>\n                          </li>\n                      )\n                  }\n              </ul>\n              </div>\n            </Jumbotron>\n          </Container>\n        </div>\n\n      \n    );\n  }\n    \n  }\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}