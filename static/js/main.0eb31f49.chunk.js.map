{"version":3,"sources":["js/data.js","js/utilities.js","js/functions.js","img/riverford-transparent.png","App.js","reportWebVitals.js","index.js"],"names":["alphaBet","alphaBetScore","theScore","theNumbers","getMaxIndex","_numArr","maxNum","Math","max","maxIndex","ii","length","stripStrCleanArray","str","strToArray","trim","replace","split","noReturnArr","push","LineCount","MeanCalculate","cleanArr","totalLetterLength","wordSet","i","reduce","a","b","toFixed","ModeCalculate","iii","JSON","stringify","highestScoreIndex","MedianCalculate","_middlePos","sortedNewArray","sort","middlePos","Number","isInteger","_arr","middleLowerPos","middleUpperPos","middleLowerCount","medianEven","ceil","MostCommonLetter","letterArr","strippedStr","toLowerCase","Array","from","stripStrLetters","App","showFile","window","File","FileReader","FileList","Blob","scope","file","document","querySelector","files","reader","type","match","onload","event","_data","target","result","setState","resultObj","console","log","readAsText","alert","state","name","resultArray","className","Helmet","Container","Jumbotron","src","logo","alt","onChange","this","map","obj","index","title","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4QAIaA,EAAW,CACpB,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,KAGKC,EAAgB,CACzB,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,GAGOC,EAAW,CAAC,EAAE,EAAE,EAAE,EAC3B,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,EAAE,GAGGC,EAAa,CAAC,EAAE,EAAE,EAAE,EAC7B,EAAE,EAAE,EAAE,EACN,EAAE,EAAE,GAAG,GACP,GAAG,GAAG,GAAG,GACT,GAAG,GAAG,GAAG,GAAG,I,QCbT,SAASC,EAAYC,GAIxB,IAHA,IAAIC,EAASC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IACrBI,EAAW,EAEPC,EAAK,EAAGA,EAAKL,EAAQM,OAAQD,IACjCD,EAAWJ,EAAQK,KAAQJ,EAASI,EAAKD,EAE7C,OAAOA,EAiBJ,SAASG,EAAmBC,GAO/B,IALA,IAEIC,EAFUD,EAAIE,OACQC,QAAQ,SAAU,OACfC,MAAM,KAC/BC,EAAc,GAEVR,EAAI,EAAGA,EAAKI,EAAWH,OAAQD,IAGb,MAAnBI,EAAWJ,IAAkC,KAAnBI,EAAWJ,GAEpCQ,EAAcA,EAEdA,EAAYC,KAAKL,EAAWJ,IAIpC,OAAOQ,EC3CJ,SAASE,EAAUP,GACtB,OAAOA,EAAII,MAAM,MAAMN,OAGpB,SAASU,EAAcR,GAM1B,IAJA,IAAMS,EAAWV,EAAmBC,GAC9BU,EAAoBD,EAASX,OAC7Ba,EAAU,GAERC,EAAE,EAAEA,EAAEF,EAAkBE,IAC9BD,EAAQL,KAAKG,EAASG,GAAGd,QAS3B,OANkBa,EAAQE,QAAO,SAASC,EAAGC,GACzC,OAAOD,EAAIC,IACZ,GAEyBJ,EAAQb,QAAQkB,QAAQ,GAM/C,SAASC,EAAcjB,GAM5B,IAJA,IAAIC,EAAaD,EAAII,MAAM,KACvBM,EAAoBT,EAAWH,OAE/Ba,EAAU,GACNC,EAAE,EAAEA,EAAEF,EAAkBE,IAC9BD,EAAQL,KAAKL,EAAWW,GAAGd,QAG7B,IAAI,IAAIc,EAAE,EAAGA,EAAID,EAAQb,OAAQc,IAC/B,IAAK,IAAIM,EAAM,EAAGA,EAAM5B,EAAWQ,OAAQoB,IAElCC,KAAKC,UAAU9B,EAAW4B,MAAQC,KAAKC,UAAUT,EAAQC,MACxDvB,EAAS6B,GAAO7B,EAAS6B,GAAO,GAM5C,IAAIG,EAAoB9B,EAAYF,GAEpC,OAAOC,EAAW+B,GAIb,SAASC,EAAgBtB,GAK9B,IAJA,IAAMS,EAAWV,EAAmBC,GAC9BU,EAAoBD,EAASX,OAE7Ba,EAAU,GACRC,EAAE,EAAEA,EAAEF,EAAkBE,IAC9BD,EAAQL,KAAKG,EAASG,GAAGd,QAG3B,IDhE4ByB,ECgEtBC,EAAiBb,EAAQc,MAAK,SAASX,EAAEC,GAAK,OAAOD,EAAIC,KACzDW,EAAYF,EAAe1B,OAAO,EAIzC,OAFgB6B,OAAOC,UAAUF,GDjF7B,SAAoBG,EAAMN,GAE7B,IAAIO,EAAiBP,EACjBQ,EAAiBR,EAAa,EAGlCQ,GAAiC,EAEjC,IAAIC,EAAmBH,EAHvBC,GAAiC,GAMjC,OAFuBD,EAAKE,GAEDC,GAAoB,ECsEFC,CAAWT,EAAgBE,IDnE5CH,ECmEmFG,EAAhBF,EDlE5D9B,KAAKwC,KAAKX,EAAa,KCwErD,SAASY,EAAiBnC,GAI3B,IAFA,IAAMoC,EDxDP,SAA0BpC,GAE7B,IACIqC,EADerC,EAAIsC,cACQnC,QAAQ,YAAa,IAGpD,OAFgBoC,MAAMC,KAAKH,GCoDLI,CAAgBzC,GAEzBY,EAAE,EAAGA,EAAIwB,EAAUtC,OAAQc,IAChC,IAAK,IAAIf,EAAG,EAAGA,EAAKV,EAASW,OAAQD,IACjCT,EAAcS,GAAMV,EAASU,KAAQuC,EAAUxB,GAAMxB,EAAcS,GAAI,EAAI,KAInF,OAAOV,EAASI,EAAYH,I,UCnGrB,MAA0B,kDCgJ1BsD,E,kDA7Hb,aAAe,IAAD,8BACZ,gBAWFC,SAAW,WACT,GAAIC,OAAOC,MAAQD,OAAOE,YAAcF,OAAOG,UAAYH,OAAOI,KAAM,CACnE,IAAMC,EAAK,eAEPC,EAAOC,SAASC,cAAc,oBAAoBC,MAAM,GACxDC,EAAS,IAAIR,WAMbI,EAAKK,KAAKC,MAJC,UAMZF,EAAOG,OAAS,SAAUC,GAExB,IF9BY1D,EE8BN2D,EAAQD,EAAME,OAAOC,OAE3BZ,EAAMa,SAAS,CACbC,UAAW,CACT,CACE,MAAS,cACT,QFpCM/D,EEoCc2D,EFnCnB5D,EAAmBC,GACpBF,SEoCF,CACE,MAAS,cACT,OAAUS,EAAUoD,IAEtB,CACE,MAAS,8CACT,OAAUnD,EAAcmD,IAE1B,CACE,MAAS,kDACT,OAAU1C,EAAc0C,IAE1B,CACE,MAAS,yDACT,OAAUrC,EAAgBqC,IAE5B,CACE,MAAS,sBACT,OAAUxB,EAAiBwB,QAOnCK,QAAQC,IAAI,8CAEfX,EAAOY,WAAWhB,QAGrBiB,MAAM,sDA/DR,EAAKC,MAAQ,CACXC,KAAM,QACNC,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,GACrBP,UAAW,IALD,E,qDAuEZ,OACI,sBAAKQ,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,UACM,2DAEN,cAACC,EAAA,EAAD,CAAWF,UAAU,MAArB,SACE,eAACG,EAAA,EAAD,CACEH,UAAU,aADZ,UAGE,qBACEA,UAAU,WACVI,IAAKC,EACLC,IAAI,mBAEN,oBAAIN,UAAU,6BAAd,4CACA,oBAAIA,UAAU,2BAAd,wCACA,qBACEA,UAAU,MADZ,SAGI,uBACEhB,KAAK,OACLuB,SAAUC,KAAKpC,aAGrB,8BACA,oBAAI4B,UAAU,8BAAd,SACKQ,KAAKX,MAAML,UAAUiB,KAAI,SAACC,EAAIC,GAAL,OAClB,oBAEIX,UAAU,mBAFd,SAII,sBACEA,UAAU,iCADZ,UAGI,qBACEA,UAAU,SADZ,SAEEU,EAAIE,QACN,qBAAKZ,UAAU,qBAAf,SAAqCU,EAAIpB,aATxCqB,sB,GApGfE,aCNLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAAS8C,eAAe,SAM1BZ,M","file":"static/js/main.0eb31f49.chunk.js","sourcesContent":["//data.js\n//data tables, variables, etc.\n\n// testing for letter - arrays same size?\nexport const alphaBet = [\n    \"a\",\"b\",\"c\",\"d\",\n    \"e\",\"f\",\"g\",\"h\",\n    \"i\",\"j\",\"k\",\"l\",\n    \"m\",\"n\",\"o\",\"p\",\n    \"q\",\"r\",\"s\",\"t\",\n    \"u\",\"v\",\"w\",\"x\",\n    \"y\",\"z\",\n];\n\nexport const alphaBetScore = [\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,\n];\n// testing for word length - arrays same size?\nexport const theScore = [0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    0,0,0,0,\n    ];\n\nexport const theNumbers = [0,1,2,3,\n    4,5,6,7,\n    8,9,10,11,\n    12,13,14,15,\n    16,17,18,19,20                  \n    ];","//utilities.js\n// odd/even test\nexport function medianEven(_arr, _middlePos){\n    \n    var middleLowerPos = _middlePos;\n    var middleUpperPos = _middlePos + 1;\n    // array nudge - include 0\n    middleLowerPos = middleLowerPos -1;\n    middleUpperPos = middleUpperPos -1;\n\n    var middleLowerCount = _arr[middleLowerPos];\n    var middleUpperCount = _arr[middleUpperPos];\n\n    return (middleUpperCount + middleLowerCount) / 2;\n}\n\nexport function medianOdd(_arr, _middlePos){\n    var middlePosRoundUpAndNudgeDown = Math.ceil(_middlePos - 1);\n    return _arr[middlePosRoundUpAndNudgeDown];\n}\n//\n//returns the index with the highest numnber in array..\nexport function getMaxIndex(_numArr){\n    var maxNum = Math.max(..._numArr);\n    var maxIndex = 0;\n\n    for(let ii = 0; ii < _numArr.length; ii++){\n        maxIndex = _numArr[ii] === maxNum ? ii : maxIndex;\n    }\n    return maxIndex;\n\n}\n\n//string cleaning\n//returns array of all letters\nexport function  stripStrLetters(str) {\n\n    var lowercaseStr = str.toLowerCase();\n    var strippedStr = lowercaseStr.replace(/\\n|\\r|\\s/g, \"\");\n    var letterArr = Array.from(strippedStr);\n\n    return letterArr;\n}\n\n//returns array of all words with spaces and carriage returns removed\n// NEED TO TEST ON WINDOWS!\nexport function stripStrCleanArray(str){\n    //\n    var trimStr = str.trim();\n    var strippedStr = trimStr.replace(/\\n|\\r/g, \" - \");\n    var strToArray = strippedStr.split(\" \");\n    var noReturnArr = [];\n\n    for(let ii =0; ii < strToArray.length; ii++){\n        //TERTIARY!!\n        // strToArray[ii] === \"-\" || strToArray[ii] === \"\" ? doThis() : noReturnArr.push(strToArray[ii]);\n        if(strToArray[ii] === \"-\" || strToArray[ii] === \"\"){\n            //null;\n            noReturnArr = noReturnArr;\n        }else{\n            noReturnArr.push(strToArray[ii]);\n        }\n    }\n    //\n    return noReturnArr;\n}","\nimport {alphaBet,\n    alphaBetScore,\n    theNumbers,\n    theScore,\n    } from './data.js';\n\nimport {getMaxIndex,\n        stripStrLetters,\n        stripStrCleanArray,\n        medianEven,\n        medianOdd,\n        } from './utilities.js';\n\n//\n\nexport function WordCount(str) { \n    const cleanArr = stripStrCleanArray(str);\n    return cleanArr.length;\n  }\n\nexport function LineCount(str) {\n    return str.split(\"\\n\").length;\n}\n\nexport function MeanCalculate(str) {\n\n    const cleanArr = stripStrCleanArray(str);// rename - cleanArr\n    const totalLetterLength = cleanArr.length;\n    const wordSet = [];\n\n    for(let i=0;i<totalLetterLength;i++){\n      wordSet.push(cleanArr[i].length);\n    }\n\n    const wordTotal = wordSet.reduce(function(a, b){\n        return a + b;\n    }, 0);\n\n    const wordMean = (wordTotal/wordSet.length).toFixed(1);\n\n    return wordMean;\n\n  }\n\n  export function ModeCalculate(str) {\n    \n    var strToArray = str.split(\" \");\n    var totalLetterLength = strToArray.length;\n\n    var wordSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      wordSet.push(strToArray[i].length);\n    }\n\n    for(let i=0; i < wordSet.length; i++){\n      for (let iii = 0; iii < theNumbers.length; iii++){\n            // theScore[iii] = JSON.stringify(theNumbers[iii])===(JSON.stringify(wordSet[i])) ? theScore[iii] + 1: null;\n            if(JSON.stringify(theNumbers[iii])===JSON.stringify(wordSet[i])){\n                theScore[iii] = theScore[iii] + 1;\n            }\n        \n        }\n    }\n\n    var highestScoreIndex = getMaxIndex(theScore);\n   \n    return theNumbers[highestScoreIndex];\n                    \n  }\n\n  export function MedianCalculate(str){\n    const cleanArr = stripStrCleanArray(str);\n    const totalLetterLength = cleanArr.length;\n    //\n    const wordSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      wordSet.push(cleanArr[i].length);\n    }\n\n    const sortedNewArray = wordSet.sort(function(a,b) { return a - b; });\n    const middlePos = sortedNewArray.length/2;\n\n    const median = Number.isInteger(middlePos) ? medianEven(sortedNewArray, middlePos) : medianOdd(sortedNewArray, middlePos);\n  \n   return median;\n\n  }\n\n  export function MostCommonLetter(str) {\n\n        const letterArr = stripStrLetters(str);\n\n        for (let i=0; i < letterArr.length; i++){\n            for (let ii=0; ii < alphaBet.length; ii++){\n                alphaBetScore[ii] = alphaBet[ii] === letterArr[i] ?  alphaBetScore[ii]+1 : null;\n            }\n        }\n\n        return alphaBet[getMaxIndex(alphaBetScore)];\n\n\n  }","export default __webpack_public_path__ + \"static/media/riverford-transparent.9ba83d44.png\";","import React, { Component } from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import Button from 'react-bootstrap/Button';\n\nimport { WordCount, \n         LineCount,\n         MeanCalculate,\n         ModeCalculate,\n         MedianCalculate,\n         MostCommonLetter,\n       } from './js/functions.js';\nimport './App.css';\n\nimport logo from './img/riverford-transparent.png';\n\n  class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"React\",\n      resultArray:[1,2,3,4,5,],\n      resultObj: [\n\n        ],\n    };\n  }\n\n\n  showFile = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n         const scope = this;   \n\n         var file = document.querySelector('input[type=file]').files[0];\n         var reader = new FileReader()\n\n         var textFile = /text.*/;\n\n        \n\n         if (file.type.match(textFile)) {\n            \n            reader.onload = function (event) {\n\n              const _data = event.target.result;\n\n              scope.setState({\n                resultObj: [\n                  {\n                    \"title\": \"Word Count \",\n                    \"result\": WordCount(_data),\n                  },\n                  {\n                    \"title\": \"Line Count \",\n                    \"result\": LineCount(_data),\n                  },\n                  {\n                    \"title\": \"Mean - Average number of letters per word: \",\n                    \"result\": MeanCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Mode - Most common number of letters per word: \",\n                    \"result\": ModeCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Median - Number of letters per word in middle of set: \",\n                    \"result\": MedianCalculate(_data),// add more definition below text??\n                  },\n                  {\n                    \"title\": \"Most common letter \",\n                    \"result\": MostCommonLetter(_data),\n                  },\n                ],\n              });\n\n            }\n         } else {\n            console.log(\"Error - Please make sure it is a .txt file\");\n         }\n         reader.readAsText(file);\n\n   } else {\n      alert(\"Your browser is too old to support HTML5 File API\");\n   }\n  }  \n\n  render() {\n\n    return (\n        <div className=\"App\">\n          <Helmet>\n                <title>Statistical Analysis</title>\n            </Helmet>\n          <Container className=\"p-3\">\n            <Jumbotron\n              className=\"App-header\"\n            >\n              <img\n                className=\"App-logo\"\n                src={logo}\n                alt=\"Riverford Logo\"\n              />\n              <h1 className=\"bigTxt font-weight-lighter\">Text file Statistical Analysis</h1>\n              <h2 className=\"medTxt font-weight-light\" >Please choose a .txt file:</h2>\n              <div\n                className=\"p-4\"\n              >\n                  <input \n                    type=\"file\" \n                    onChange={this.showFile} \n                    />\n              </div>\n              <div>\n              <ul className=\"list-group list-group-flush\">\n                  {this.state.resultObj.map((obj,index) => \n                          <li \n                              key={index}\n                              className=\"list-group-item \"\n                          >\n                              <div\n                                className=\"d-flex justify-content-between\"\n                              >\n                                  <div\n                                    className=\"smlTxt\"\n                                  >{obj.title}</div>\n                                  <div className=\"text-danger smlTxt\">{obj.result}</div>\n                              </div>\n                          </li>\n                      )\n                  }\n              </ul>\n              </div>\n            </Jumbotron>\n          </Container>\n        </div>\n\n      \n    );\n  }\n    \n  }\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}