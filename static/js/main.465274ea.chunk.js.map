{"version":3,"sources":["js/functions.js","img/riverford-transparent.png","App.js","reportWebVitals.js","index.js"],"names":["WordCount","str","strippedStr","replace","console","log","strToArray","split","noReturnArr","ii","length","push","MeanCalculate","totalLetterLength","testNewSet","i","reduce","a","b","toFixed","ModeCalculate","theScore","theNumbers","iii","JSON","stringify","arr","max","maxIndex","indexOfMax","MedianCalculate","mid","Math","floor","nums","sort","getMedian","indexOf","MostCommonLetter","trim","toLowerCase","letterArr","Array","from","alphaBet","alphaBetScore","getMaxIndex","_numArr","maxNum","App","showFile","window","File","FileReader","FileList","Blob","scope","file","document","querySelector","files","reader","type","match","onload","event","_data","target","result","setState","resultObj","readAsText","alert","state","name","resultArray","className","Helmet","Container","Jumbotron","src","logo","onChange","this","map","obj","index","title","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.465274ea.chunk.js","sourcesContent":["export function WordCount(str) { \n    //ABSTRACT/////\n    var strippedStr = str.replace(/\\n|\\r/g, \" - \");\n    console.log(\"-> stripped -> \", strippedStr);\n    var strToArray = strippedStr.split(\" \");\n    console.log(\"arr original words: \", strToArray);\n    var noReturnArr = [];\n    for(var ii =0; ii < strToArray.length; ii++){\n        if(strToArray[ii] === \"-\" || strToArray[ii] === \"\"){\n            //null;\n        }else{\n            noReturnArr.push(strToArray[ii]);\n        }\n    }\n    ///////\n    return noReturnArr.length;//INCORRECT!!! - carriage returns!!!\n  }\n\nexport function LineCount(str) {\n    return str.split(\"\\n\").length;\n}\n\nexport function MeanCalculate(str) {\n    //var lowercaseStr = str.toLowerCase();\n    //replace carriage return with charicter\n\n    //ABSTRACT/////-special charicters!!!\n    var strippedStr = str.replace(/\\n|\\r/g, \" - \");\n    console.log(\"-> stripped -> \", strippedStr);\n    var strToArray = strippedStr.split(\" \");\n    console.log(\"arr original words: \", strToArray);\n    var noReturnArr = [];\n    for(var ii =0; ii < strToArray.length; ii++){\n        if(strToArray[ii] === \"-\" || strToArray[ii] === \"\"){\n            //null;\n        }else{\n            noReturnArr.push(strToArray[ii]);\n        }\n    }\n    /////\n\n    // const noreturnArr = utilStrip(str);\n    console.log(\"arr the clean words: \", noReturnArr);\n    // console.log(\"arr total number items -> \", noReturnArr.length);\n    //console.log(\"MEAN -> \",totalLetterLength);\n\n    const totalLetterLength = noReturnArr.length;\n\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(noReturnArr[i].length);\n    }\n\n    console.log(\"arr total x totals\", testNewSet);\n\n    //test - -- CHANGE WORD\n    var testNewTotal = testNewSet.reduce(function(a, b){\n        return a + b;\n    }, 0);\n\n    const testNewLngth = testNewSet.length;\n\n    const testMean = (testNewTotal/testNewLngth).toFixed(1);\n\n    return testMean;\n\n  }\n\n  export function ModeCalculate(str) {\n    //\n    const strToArray = str.split(\" \");\n    const totalLetterLength = strToArray.length;\n\n    //\n    //new array of word counts\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(strToArray[i].length);\n    }\n    //test scores against 0-20?\n    //could increase if using bigger words?\n    let theScore = [0,0,0,0,\n                    0,0,0,0,\n                    0,0,0,0,\n                    0,0,0,0,\n                    0,0,0,0,\n                    ];\n    let theNumbers = [0,1,2,3,\n                    4,5,6,7,\n                    8,9,10,11,\n                    12,13,14,15,\n                    16,17,18,19,20                  \n                    ];\n    \n\n    for(let i=0; i < testNewSet.length; i++){\n      for (let iii = 0; iii < theNumbers.length; iii++){\n        if (JSON.stringify(theNumbers[iii])===(JSON.stringify(testNewSet[i]))) {\n              // match\n              theScore[iii] = theScore[iii] + 1;\n          } else {\n              //No match\n          }\n      }\n\n    }\n\n    //abstract into utilities.js\n\n    function indexOfMax(arr) {\n      if (arr.length === 0) {\n          return -1;\n      }\n      var max = arr[0];\n      var maxIndex = 0;\n  \n      for (var i = 1; i < arr.length; i++) {\n          if (arr[i] > max) {\n              maxIndex = i;\n              max = arr[i];\n          }\n      }\n      return maxIndex;\n    }\n    var highestScoreIndex = indexOfMax(theScore);\n    return theNumbers[highestScoreIndex];\n                    \n  }\n\n  //MEDIAN\n\n  export function MedianCalculate(str){\n    // const strToArray = str.split(\" \");\n    // const totalLetterLength = strToArray.length;\n\n    /*\n    two lwt let two det fun mey \n    fvg bnn kkk \n    kkk cvc mmm\n    xcv\n\n    3,3,3,3,3,\n    3,3,3,3,3,\n    3,3,3,3,\n    */\n    //ABSTRACT/////\n    var strippedStr = str.replace(/\\n|\\r/g, \" - \");\n    console.log(\"-> stripped -> \", strippedStr);\n    var strToArray = strippedStr.split(\" \");\n    console.log(\"arr original words: \", strToArray);\n    var noReturnArr = [];\n    for(var ii =0; ii < strToArray.length; ii++){\n        if(strToArray[ii] === \"-\" || strToArray[ii] === \"\"){\n            //null;\n        }else{\n            noReturnArr.push(strToArray[ii]);\n        }\n    }\n    ///////\n    const totalLetterLength = noReturnArr.length;\n    //\n    //new array of word counts\n    const testNewSet = [];\n    for(let i=0;i<totalLetterLength;i++){\n      testNewSet.push(noReturnArr[i].length);\n    }\n\n    var sortedNewArray = testNewSet.sort(function(a,b) { return a - b; });\n    \n    var uniq = sortedNewArray.reduce(function(a,b){\n        if (a.indexOf(b) < 0 ) a.push(b);\n        return a;\n      },[]);\n\n\n    //#Source https://bit.ly/2neWfJ2 \n    const getMedian = arr => {\n      const mid = Math.floor(arr.length / 2),\n        nums = [...arr].sort((a, b) => a - b);\n      return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n    };\n\n    return getMedian(uniq);\n  }\n\n  export function MostCommonLetter(str) {\n        //whole thing as letters?\n        //apple / windows line breaks..\n        //MAKE INTO UTILITY FUNCTION///\n        const myString = \"   \\n \\n\\n Hey! \\n I'm a string!!!         \\n\\n\";\n        const trimmedString = myString.trim();\n        //\n        var lowercaseStr = str.toLowerCase();\n        var strippedStr = lowercaseStr.replace(/\\n|\\r|\\s/g, \"\");\n        var letterArr = Array.from(strippedStr);\n\n        //NEED TO CHANGE to lowercase!!\n\n        var alphaBet = [\n            \"a\",\"b\",\"c\",\"d\",\n            \"e\",\"f\",\"g\",\"h\",\n            \"i\",\"j\",\"k\",\"l\",\n            \"m\",\"n\",\"o\",\"p\",\n            \"q\",\"r\",\"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\n            \"y\",\"z\",\n        ]\n        var alphaBetScore = [\n            0,0,0,0,\n            0,0,0,0,\n            0,0,0,0,\n            0,0,0,0,\n            0,0,0,0,\n            0,0,0,0,\n            0,0,\n        ]\n\n        console.log(\"-->\", letterArr);\n         \n        //iterate through letterArr\n        // find matches and add scores?\n        for (let i=0; i < letterArr.length; i++){\n\n            for (let ii=0; ii < alphaBet.length; ii++){\n                //loop through alphabet\n                if(alphaBet[ii] === letterArr[i]){\n                    //console.log(\"match!\",alphaBet[ii],letterArr[i]);\n                    //add to score arr\n                    alphaBetScore[ii] = alphaBetScore[ii]+1;\n                }else{\n                    //alphaBetScore\n                    alphaBetScore[ii] = alphaBetScore[ii];\n                }\n            }\n        }\n        function getMaxIndex(_numArr){\n            var maxNum = Math.max(..._numArr);\n            var maxIndex = 0;\n            console.log(\"max -> \", maxNum);\n            for(let ii = 0; ii < _numArr.length; ii++){\n                // console.log(\"--> \", maxNum, _numArr[ii]);\n                if(_numArr[ii] == maxNum){\n                    maxIndex = ii ;\n                }\n            }\n\n            return maxIndex;\n\n        }\n        console.log(\"score arr:: \", alphaBetScore);\n        console.log(\"score arr:: \", alphaBet[getMaxIndex(alphaBetScore)]);\n\n        return alphaBet[getMaxIndex(alphaBetScore)];\n\n\n  }","export default __webpack_public_path__ + \"static/media/riverford-transparent.9ba83d44.png\";","import React, { Component } from 'react';\nimport {Helmet} from \"react-helmet\";\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n// import Button from 'react-bootstrap/Button';\n\nimport { WordCount, \n         LineCount,\n         MeanCalculate,\n         ModeCalculate,\n         MedianCalculate,\n         MostCommonLetter,\n       } from './js/functions.js';\nimport './App.css';\n\nimport logo from './img/riverford-transparent.png';\n\n  class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"React\",\n      resultArray:[1,2,3,4,5,],\n      resultObj: [\n\n        ],\n    };\n  }\n\n\n  showFile = () => {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n         const scope = this;   \n\n         var file = document.querySelector('input[type=file]').files[0];\n         var reader = new FileReader()\n\n         var textFile = /text.*/;\n\n        \n\n         if (file.type.match(textFile)) {\n            \n            reader.onload = function (event) {\n\n              const _data = event.target.result;\n\n              scope.setState({\n                resultObj: [\n                  {\n                    \"title\": \"Word Count \",\n                    \"result\": WordCount(_data),\n                  },\n                  {\n                    \"title\": \"Line Count \",\n                    \"result\": LineCount(_data),\n                  },\n                  {\n                    \"title\": \"Mean - Average number of letters per word: \",\n                    \"result\": MeanCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Mode - Most common number of letters per word: \",\n                    \"result\": ModeCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Median ?? ->> Number of letters per word in middle of set: \",\n                    \"result\": MedianCalculate(_data),\n                  },\n                  {\n                    \"title\": \"Most common letter \",\n                    \"result\": MostCommonLetter(_data),\n                  },\n                ],\n              });\n\n            }\n         } else {\n            console.log(\"Error - Please make sure it is a .txt file\");\n         }\n         reader.readAsText(file);\n\n   } else {\n      alert(\"Your browser is too old to support HTML5 File API\");\n   }\n  }  \n\n  render() {\n\n    return (\n        <div className=\"App\">\n          <Helmet>\n                <title>Statistical Analysis</title>\n            </Helmet>\n          <Container className=\"p-3\">\n            <Jumbotron\n              className=\"App-header\"\n            >\n              <img\n                className=\"App-logo\"\n                src={logo}\n              />\n              <h1 className=\"bigTxt font-weight-lighter\">Text file Statistical Analysis</h1>\n              <h2 className=\"medTxt font-weight-light\" >Please choose a .txt file:</h2>\n              <div\n                className=\"p-4\"\n              >\n                  <input \n                    type=\"file\" \n                    onChange={this.showFile} \n                    />\n              </div>\n              <div>\n              <ul className=\"list-group list-group-flush\">\n                  {this.state.resultObj.map((obj,index) => \n                          <li \n                              key={index}\n                              className=\"list-group-item \"\n                          >\n                              <div\n                                className=\"d-flex justify-content-between\"\n                              >\n                                  <div\n                                    className=\"smlTxt\"\n                                  >{obj.title}</div>\n                                  <div className=\"text-danger smlTxt\">{obj.result}</div>\n                              </div>\n                          </li>\n                      )\n                  }\n              </ul>\n              </div>\n            </Jumbotron>\n          </Container>\n        </div>\n\n      \n    );\n  }\n    \n  }\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}